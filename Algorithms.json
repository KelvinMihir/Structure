[{
  "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 2099,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func cartesianProduct&lt;T, U&gt;(_ a: <Type usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1UL_q_mfp\">U<\/Type>) -&gt; [(<Type usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1TL_xmfp\">T<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type>, <Type usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1UL_q_mfp\">U<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type>)] where T : <Type usr=\"s:ST\">Sequence<\/Type>, U : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 158
          }
        ],
        "key.bodylength" : 52,
        "key.bodyoffset" : 274,
        "key.doc.column" : 13,
        "key.doc.comment" : "- Returns: Cartesian product of two sequences.",
        "key.doc.declaration" : "public func cartesianProduct<T, U>(_ a: T, _ b: U) -> [(T.Element, U.Element)] where T : Sequence, U : Sequence",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift\" line=\"11\" column=\"13\"><Name>cartesianProduct(_:_:)<\/Name><USR>s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF<\/USR><Declaration>public func cartesianProduct&lt;T, U&gt;(_ a: T, _ b: U) -&gt; [(T.Element, U.Element)] where T : Sequence, U : Sequence<\/Declaration><CommentParts><ResultDiscussion><Para>Cartesian product of two sequences.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 11,
        "key.doc.name" : "cartesianProduct(_:_:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "Cartesian product of two sequences."
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 51,
        "key.docoffset" : 107,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>cartesianProduct<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1TL_xmfp\">T<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1UL_q_mfp\">U<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>)<\/tuple>]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>T : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement>U : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 162,
        "key.name" : "cartesianProduct(_:_:)",
        "key.namelength" : 39,
        "key.nameoffset" : 170,
        "key.offset" : 165,
        "key.parsed_declaration" : "public func cartesianProduct <T,U> (_ a: T, _ b: U) -> [(T.Element, U.Element)]\n    where T: Sequence, U: Sequence",
        "key.parsed_scope.end" : 15,
        "key.parsed_scope.start" : 11,
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 188,
            "key.offset" : 188,
            "key.parsed_declaration" : "public func cartesianProduct <T,U> (_ a: T, _ b: U) -> [(T.Element, U.Element)]",
            "key.parsed_scope.end" : 11,
            "key.parsed_scope.start" : 11,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>U<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "U",
            "key.namelength" : 1,
            "key.nameoffset" : 190,
            "key.offset" : 190,
            "key.parsed_declaration" : "public func cartesianProduct <T,U> (_ a: T, _ b: U) -> [(T.Element, U.Element)]",
            "key.parsed_scope.end" : 11,
            "key.parsed_scope.start" : 11,
            "key.typename" : "U.Type",
            "key.typeusr" : "$Sq_mD",
            "key.usr" : "s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF1UL_q_mfp"
          }
        ],
        "key.typename" : "<T, U where T : Sequence, U : Sequence> (T, U) -> [(T.Element, U.Element)]",
        "key.typeusr" : "$SySay7ElementQz_AAQy_tGx_q_tcSTRzSTR_r0_luD",
        "key.usr" : "s:10Algorithms16cartesianProductySay7ElementQz_ACQy_tGx_q_tSTRzSTR_r0_lF"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type> where <Type usr=\"s:Sl4Selfxmfp\">Self<\/Type>.SubSequence : <Type usr=\"s:Sl\">Collection<\/Type><\/Declaration>",
        "key.bodylength" : 1520,
        "key.bodyoffset" : 351,
        "key.doc.declaration" : "protocol Collection : Sequence where Self.SubSequence : Collection",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence where Self.SubSequence : Collection<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sl4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1543,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 339,
        "key.offset" : 329,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func subsets(cardinality k: <Type usr=\"s:Si\">Int<\/Type>) -&gt; [[<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 481
              }
            ],
            "key.bodylength" : 604,
            "key.bodyoffset" : 537,
            "key.doc.column" : 17,
            "key.doc.comment" : "- Returns: All combinations of with a given `cardinality` (i.e., how many elements chosen\nper combination).",
            "key.doc.declaration" : "public func subsets(cardinality k: Int) -> [[Element]]",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift\" line=\"21\" column=\"17\"><Name>subsets(cardinality:)<\/Name><USR>s:Sl10AlgorithmsE7subsets11cardinalitySaySay7ElementQzGGSi_tF<\/USR><Declaration>public func subsets(cardinality k: Int) -&gt; [[Element]]<\/Declaration><CommentParts><ResultDiscussion><Para>All combinations of with a given <codeVoice>cardinality<\/codeVoice> (i.e., how many elements chosen per combination).<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 21,
            "key.doc.name" : "subsets(cardinality:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "All combinations of with a given `cardinality` (i.e., how many elements chosen per combination)."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 120,
            "key.docoffset" : 357,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>subsets<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cardinality<\/decl.var.parameter.argument_label> <decl.var.parameter.name>k<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 654,
            "key.name" : "subsets(cardinality:)",
            "key.namelength" : 27,
            "key.nameoffset" : 493,
            "key.offset" : 488,
            "key.parsed_declaration" : "public func subsets(cardinality k: Int) -> [[Element]]",
            "key.parsed_scope.end" : 38,
            "key.parsed_scope.start" : 21,
            "key.substructure" : [
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func subsets(cardinality k: <Type usr=\"s:Si\">Int<\/Type>, appendingTo prefix: [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>], at index: <Type usr=\"s:Sl5IndexQa\">Index<\/Type>) -&gt; [[<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]]<\/Declaration>",
                "key.bodylength" : 398,
                "key.bodyoffset" : 664,
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>subsets<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>cardinality<\/decl.var.parameter.argument_label> <decl.var.parameter.name>k<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>appendingTo<\/decl.var.parameter.argument_label> <decl.var.parameter.name>prefix<\/decl.var.parameter.name>: <decl.var.parameter.type>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>at<\/decl.var.parameter.argument_label> <decl.var.parameter.name>index<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]]<\/decl.function.returntype><\/decl.function.free>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 516,
                "key.name" : "subsets(cardinality:appendingTo:at:)",
                "key.namelength" : 75,
                "key.nameoffset" : 552,
                "key.offset" : 547,
                "key.parsed_declaration" : "func subsets(cardinality k: Int, appendingTo prefix: [Element], at index: Index)\n    -> [[Element]]",
                "key.parsed_scope.end" : 35,
                "key.parsed_scope.start" : 23,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:Sl10AlgorithmsE7subsets11cardinalitySaySay7ElementQzGGSi_tF\">subsets(cardinality:)<\/RelatedName>"
                  }
                ],
                "key.substructure" : [

                ],
                "key.typename" : "<Self where Self : Collection> (cardinality: Int, appendingTo: [Self.Element], at: Self.Index) -> [[Self.Element]]",
                "key.typeusr" : "$S11cardinality11appendingTo2atSaySay7ElementQzGGSi_AF5IndexQztcSlRzluD",
                "key.usr" : "s:Sl10AlgorithmsE7subsets11cardinalitySaySay7ElementQzGGSi_tFABL_AC11appendingTo2atAGSi_AF5IndexQztSlRzlF"
              }
            ],
            "key.typename" : "<Self where Self : Collection> (Self) -> (Int) -> [[Self.Element]]",
            "key.typeusr" : "$S11cardinalitySaySay7ElementQzGGSi_tcD",
            "key.usr" : "s:Sl10AlgorithmsE7subsets11cardinalitySaySay7ElementQzGGSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var permutations: [[<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]] { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 1236
              }
            ],
            "key.bodylength" : 595,
            "key.bodyoffset" : 1274,
            "key.doc.column" : 16,
            "key.doc.comment" : "All of the permutations of each of the elements in each of the given sequences.",
            "key.doc.declaration" : "public var permutations: [[Element]] { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift\" line=\"41\" column=\"16\"><Name>permutations<\/Name><USR>s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvp<\/USR><Declaration>public var permutations: [[Element]] { get }<\/Declaration><CommentParts><Abstract><Para>All of the permutations of each of the elements in each of the given sequences.<\/Para><\/Abstract><\/CommentParts><\/Other>",
            "key.doc.line" : 41,
            "key.doc.name" : "permutations",
            "key.doc.type" : "Other",
            "key.doclength" : 84,
            "key.docoffset" : 1148,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>permutations<\/decl.name>: <decl.var.type>[[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]]<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 627,
            "key.name" : "permutations",
            "key.namelength" : 12,
            "key.nameoffset" : 1247,
            "key.offset" : 1243,
            "key.parsed_declaration" : "public var permutations: [[Element]]",
            "key.parsed_scope.end" : 54,
            "key.parsed_scope.start" : 41,
            "key.typename" : "[[Self.Element]]",
            "key.typeusr" : "$SSaySay7ElementSTQzGGD",
            "key.usr" : "s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvp"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>func injecting&lt;S&gt;(_ value: <Type usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\">S<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type>, into values: <Type usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\">S<\/Type>) -&gt; [[<Type usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\">S<\/Type>.<Type usr=\"s:ST7ElementQa\">Element<\/Type>]] where S : <Type usr=\"s:ST\">Sequence<\/Type><\/Declaration>",
            "key.bodylength" : 181,
            "key.bodyoffset" : 1376,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>injecting<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>value<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\">S<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>into<\/decl.var.parameter.argument_label> <decl.var.parameter.name>values<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[[<ref.generic_type_param usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp\">S<\/ref.generic_type_param>.<ref.associatedtype usr=\"s:ST7ElementQa\">Element<\/ref.associatedtype>]]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>S : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement><\/decl.function.free>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.free",
            "key.length" : 274,
            "key.name" : "injecting(_:into:)",
            "key.namelength" : 50,
            "key.nameoffset" : 1289,
            "key.offset" : 1284,
            "key.parsed_declaration" : "func injecting <S> (_ value: S.Element, into values: S) -> [[S.Element]] where S: Sequence",
            "key.parsed_scope.end" : 46,
            "key.parsed_scope.start" : 43,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 1,
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 1300,
                "key.offset" : 1300,
                "key.parsed_declaration" : "func injecting <S> (_ value: S.Element, into values: S) -> [[S.Element]] where S: Sequence",
                "key.parsed_scope.end" : 43,
                "key.parsed_scope.start" : 43,
                "key.typename" : "S.Type",
                "key.typeusr" : "$Sqd__mD",
                "key.usr" : "s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF1SL_qd__mfp"
              }
            ],
            "key.typename" : "<Self, S where Self : Collection, S : Sequence> (S.Element, into: S) -> [[S.Element]]",
            "key.typeusr" : "$S_4intoSaySay7ElementQyd__GGAC_qd__tcSlRzSTRd__r__luD",
            "key.usr" : "s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg9injectingL__4intoSaySayACQyd__GGAI_qd__tSlRzSTRd__r__lF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>func permute&lt;S&gt;(_ values: <Type usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg7permuteL_yAFqd__SlRzSTRd__ACQyd__ADRSr__lF1SL_qd__mfp\">S<\/Type>) -&gt; [[<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]] where S : <Type usr=\"s:ST\">Sequence<\/Type>, <Type usr=\"s:Sl4Selfxmfp\">Self<\/Type>.Element == S.Element<\/Declaration>",
            "key.bodylength" : 158,
            "key.bodyoffset" : 1655,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>permute<\/decl.name>&lt;<decl.generic_type_param usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg7permuteL_yAFqd__SlRzSTRd__ACQyd__ADRSr__lF1SL_qd__mfp\"><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>values<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg7permuteL_yAFqd__SlRzSTRd__ACQyd__ADRSr__lF1SL_qd__mfp\">S<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]]<\/decl.function.returntype> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement>S : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol><\/decl.generic_type_requirement>, <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sl4Selfxmfp\">Self<\/ref.generic_type_param>.Element == S.Element<\/decl.generic_type_requirement><\/decl.function.free>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.free",
            "key.length" : 246,
            "key.name" : "permute(_:)",
            "key.namelength" : 25,
            "key.nameoffset" : 1573,
            "key.offset" : 1568,
            "key.parsed_declaration" : "func permute <S> (_ values: S) -> [[Element]] where S: Sequence, S.Element == Element",
            "key.parsed_scope.end" : 51,
            "key.parsed_scope.start" : 48,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>S<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
                "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>S<\/decl.generic_type_param.name><\/decl.generic_type_param>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.generic_type_param",
                "key.length" : 1,
                "key.name" : "S",
                "key.namelength" : 1,
                "key.nameoffset" : 1582,
                "key.offset" : 1582,
                "key.parsed_declaration" : "func permute <S> (_ values: S) -> [[Element]] where S: Sequence, S.Element == Element",
                "key.parsed_scope.end" : 48,
                "key.parsed_scope.start" : 48,
                "key.typename" : "S.Type",
                "key.typeusr" : "$Sqd__mD",
                "key.usr" : "s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg7permuteL_yAFqd__SlRzSTRd__ACQyd__ADRSr__lF1SL_qd__mfp"
              }
            ],
            "key.typename" : "<Self, S where Self : Collection, S : Sequence, Self.Element == S.Element> (S) -> [[Self.Element]]",
            "key.typeusr" : "$SySaySay7ElementQzGGqd__cSlRzSTRd__AAQyd__ABRSr__luD",
            "key.usr" : "s:Sl10AlgorithmsE12permutationsSaySay7ElementQzGGvg7permuteL_yAFqd__SlRzSTRd__ACQyd__ADRSr__lF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$SSl_pmD",
        "key.usr" : "s:Sl"
      },
      {
        "key.annotated_decl" : "<Declaration>protocol Sequence<\/Declaration>",
        "key.bodylength" : 175,
        "key.bodyoffset" : 1922,
        "key.doc.declaration" : "protocol Sequence",
        "key.doc.discussion" : [
          {
            "Para" : "A sequence is a list of values that you can step through one at a time. The most common way to iterate over the elements of a sequence is to use a `for`-`in` loop:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence. As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence. This example checks to see whether a particular insect is in an array."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Sequence` protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values. For clearer, more concise code, the example above could use the array’s `contains(_:)` method, which every sequence inherits from `Sequence`, instead of iterating manually:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Sequence` protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration. As a consequence, don’t assume that multiple `for`-`in` loops on a sequence will either resume iteration or restart from the beginning:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element. A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second `for`-`in` loop."
          },
          {
            "Para" : "To establish that a type you’ve created supports nondestructive iteration, add conformance to the `Collection` protocol."
          },
          {
            "Para" : "Making your own custom types conform to `Sequence` enables many useful operations, like `for`-`in` looping and the `contains` method, without much effort. To add `Sequence` conformance to your own custom type, add a `makeIterator()` method that returns an iterator."
          },
          {
            "Para" : "Alternatively, if your type can act as its own iterator, implementing the requirements of the `IteratorProtocol` protocol and declaring conformance to both `Sequence` and `IteratorProtocol` are sufficient."
          },
          {
            "Para" : "Here’s a definition of a `Countdown` sequence that serves as its own iterator. The `makeIterator()` method is provided as a default implementation."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A sequence should provide its iterator in O(1). The `Sequence` protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O() unless documented otherwise."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Sequence<\/Name><USR>s:ST<\/USR><Declaration>protocol Sequence<\/Declaration><CommentParts><Abstract><Para>A type that provides sequential, iterated access to its elements.<\/Para><\/Abstract><Discussion><Para>A sequence is a list of values that you can step through one at a time. The most common way to iterate over the elements of a sequence is to use a <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let oneTwoThree = 1...3]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for number in oneTwoThree {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(number)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>While seemingly simple, this capability gives you access to a large number of operations that you can perform on any sequence. As an example, to check whether a sequence includes a particular value, you can test each value sequentially until you’ve found a match or reached the end of the sequence. This example checks to see whether a particular insect is in an array.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[var hasMosquito = false]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for bug in bugs {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    if bug == \"Mosquito\" {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        hasMosquito = true]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        break]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(\"'bugs' has a mosquito: \\(hasMosquito)\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"'bugs' has a mosquito: false\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Sequence<\/codeVoice> protocol provides default implementations for many common operations that depend on sequential access to a sequence’s values. For clearer, more concise code, the example above could use the array’s <codeVoice>contains(_:)<\/codeVoice> method, which every sequence inherits from <codeVoice>Sequence<\/codeVoice>, instead of iterating manually:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if bugs.contains(\"Mosquito\") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Break out the bug spray.\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[} else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Whew, no mosquitos!\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Whew, no mosquitos!\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Repeated Access<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>The <codeVoice>Sequence<\/codeVoice> protocol makes no requirement on conforming types regarding whether they will be destructively consumed by iteration. As a consequence, don’t assume that multiple <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loops on a sequence will either resume iteration or restart from the beginning:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[for element in sequence {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    if ... some condition { break }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for element in sequence {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ No defined behavior]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>In this case, you cannot assume either that a sequence will be consumable and will resume iteration, or that a sequence is a collection and will restart iteration from the first element. A conforming sequence that is not a collection is allowed to produce an arbitrary sequence of elements in the second <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> loop.<\/Para><Para>To establish that a type you’ve created supports nondestructive iteration, add conformance to the <codeVoice>Collection<\/codeVoice> protocol.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Sequence Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Making your own custom types conform to <codeVoice>Sequence<\/codeVoice> enables many useful operations, like <codeVoice>for<\/codeVoice>-<codeVoice>in<\/codeVoice> looping and the <codeVoice>contains<\/codeVoice> method, without much effort. To add <codeVoice>Sequence<\/codeVoice> conformance to your own custom type, add a <codeVoice>makeIterator()<\/codeVoice> method that returns an iterator.<\/Para><Para>Alternatively, if your type can act as its own iterator, implementing the requirements of the <codeVoice>IteratorProtocol<\/codeVoice> protocol and declaring conformance to both <codeVoice>Sequence<\/codeVoice> and <codeVoice>IteratorProtocol<\/codeVoice> are sufficient.<\/Para><Para>Here’s a definition of a <codeVoice>Countdown<\/codeVoice> sequence that serves as its own iterator. The <codeVoice>makeIterator()<\/codeVoice> method is provided as a default implementation.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[struct Countdown: Sequence, IteratorProtocol {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    var count: Int]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    mutating func next() -> Int? {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        if count == 0 {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[            return nil]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        } else {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[            defer { count -= 1 }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[            return count]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[        }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    }]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let threeToGo = Countdown(count: 3)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in threeToGo {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(i)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"2\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"1\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>A sequence should provide its iterator in O(1). The <codeVoice>Sequence<\/codeVoice> protocol makes no other requirements about element access, so routines that traverse a sequence should be considered O(<emphasis>n<\/emphasis>) unless documented otherwise.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Sequence",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Sequence<\/decl.name><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 224,
        "key.modulename" : "Swift",
        "key.name" : "Sequence",
        "key.namelength" : 8,
        "key.nameoffset" : 1884,
        "key.offset" : 1874,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public var pairs: <Type usr=\"s:s12Zip2SequenceV\">Zip2Sequence<\/Type>&lt;<Type usr=\"s:ST10AlgorithmsE4Selfxmfp\">Self<\/Type>, <Type usr=\"s:ST11SubSequenceQa\">SubSequence<\/Type>&gt; { get }<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 2003
              }
            ],
            "key.bodylength" : 42,
            "key.bodyoffset" : 2053,
            "key.doc.column" : 16,
            "key.doc.comment" : "- Returns: `Zip2Sequence` of 2-tuples composed of adjacent values.",
            "key.doc.declaration" : "public var pairs: Zip2Sequence<Self, SubSequence> { get }",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.doc.full_as_xml" : "<Other file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift\" line=\"60\" column=\"16\"><Name>pairs<\/Name><USR>s:ST10AlgorithmsE5pairss12Zip2SequenceVyx03SubD0QzGvp<\/USR><Declaration>public var pairs: Zip2Sequence&lt;Self, SubSequence&gt; { get }<\/Declaration><CommentParts><ResultDiscussion><Para><codeVoice>Zip2Sequence<\/codeVoice> of 2-tuples composed of adjacent values.<\/Para><\/ResultDiscussion><\/CommentParts><\/Other>",
            "key.doc.line" : 60,
            "key.doc.name" : "pairs",
            "key.doc.result_discussion" : [
              {
                "Para" : "`Zip2Sequence` of 2-tuples composed of adjacent values."
              }
            ],
            "key.doc.type" : "Other",
            "key.doclength" : 71,
            "key.docoffset" : 1928,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Combinatorics.swift",
            "key.fully_annotated_decl" : "<decl.var.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>pairs<\/decl.name>: <decl.var.type><ref.struct usr=\"s:s12Zip2SequenceV\">Zip2Sequence<\/ref.struct>&lt;<ref.generic_type_param usr=\"s:ST10AlgorithmsE4Selfxmfp\">Self<\/ref.generic_type_param>, <ref.associatedtype usr=\"s:ST11SubSequenceQa\">SubSequence<\/ref.associatedtype>&gt;<\/decl.var.type> { <syntaxtype.keyword>get<\/syntaxtype.keyword> }<\/decl.var.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.var.instance",
            "key.length" : 86,
            "key.name" : "pairs",
            "key.namelength" : 5,
            "key.nameoffset" : 2014,
            "key.offset" : 2010,
            "key.parsed_declaration" : "public var pairs: Zip2Sequence<Self,SubSequence>",
            "key.parsed_scope.end" : 62,
            "key.parsed_scope.start" : 60,
            "key.typename" : "Zip2Sequence<Self, Self.SubSequence>",
            "key.typeusr" : "$Ss12Zip2SequenceVyx03SubB0STQzGD",
            "key.usr" : "s:ST10AlgorithmsE5pairss12Zip2SequenceVyx03SubD0QzGvp"
          }
        ],
        "key.typename" : "Sequence.Protocol",
        "key.typeusr" : "$SST_pmD",
        "key.usr" : "s:ST"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1308,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>protocol MutableCollection : <Type usr=\"s:Sl\">Collection<\/Type> where <Type usr=\"s:SM4Selfxmfp\">Self<\/Type>.SubSequence : <Type usr=\"s:SM\">MutableCollection<\/Type><\/Declaration>",
        "key.bodylength" : 1161,
        "key.bodyoffset" : 145,
        "key.doc.declaration" : "protocol MutableCollection : Collection where Self.SubSequence : MutableCollection",
        "key.doc.discussion" : [
          {
            "Para" : "Collections that conform to `MutableCollection` gain the ability to change the value of their elements. This example shows how you can modify one of the names in an array of students."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "In addition to changing the value of an individual element, you can also change the values of a slice of elements in a mutable collection. For example, you can sort  of a mutable collection by calling the mutable `sort()` method on a subscripted subsequence. Here’s an example that sorts the first half of an array of integers:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `MutableCollection` protocol allows changing the values of a collection’s elements but not the length of the collection itself. For operations that require adding or removing elements, see the `RangeReplaceableCollection` protocol instead."
          },
          {
            "Para" : "To add conformance to the `MutableCollection` protocol to your own custom collection, upgrade your type’s subscript to support both read and write access."
          },
          {
            "Para" : "A value stored into a subscript of a `MutableCollection` instance must subsequently be accessible at that same position. That is, for a mutable collection instance `a`, index `i`, and value `x`, the two sets of assignments in the following code sample must be equivalent:"
          },
          {
            "CodeListing" : ""
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>MutableCollection<\/Name><USR>s:SM<\/USR><Declaration>protocol MutableCollection : Collection where Self.SubSequence : MutableCollection<\/Declaration><CommentParts><Abstract><Para>A collection that supports subscript assignment.<\/Para><\/Abstract><Discussion><Para>Collections that conform to <codeVoice>MutableCollection<\/codeVoice> gain the ability to change the value of their elements. This example shows how you can modify one of the names in an array of students.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var students = [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = students.firstIndex(of: \"Maxime\") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    students[i] = \"Max\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(students)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"Ben\", \"Ivy\", \"Jordell\", \"Max\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>In addition to changing the value of an individual element, you can also change the values of a slice of elements in a mutable collection. For example, you can sort <emphasis>part<\/emphasis> of a mutable collection by calling the mutable <codeVoice>sort()<\/codeVoice> method on a subscripted subsequence. Here’s an example that sorts the first half of an array of integers:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var numbers = [15, 40, 10, 30, 60, 25, 5, 100]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[numbers[0..<4].sort()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(numbers)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[10, 15, 30, 40, 60, 25, 5, 100]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>MutableCollection<\/codeVoice> protocol allows changing the values of a collection’s elements but not the length of the collection itself. For operations that require adding or removing elements, see the <codeVoice>RangeReplaceableCollection<\/codeVoice> protocol instead.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the MutableCollection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>To add conformance to the <codeVoice>MutableCollection<\/codeVoice> protocol to your own custom collection, upgrade your type’s subscript to support both read and write access.<\/Para><Para>A value stored into a subscript of a <codeVoice>MutableCollection<\/codeVoice> instance must subsequently be accessible at that same position. That is, for a mutable collection instance <codeVoice>a<\/codeVoice>, index <codeVoice>i<\/codeVoice>, and value <codeVoice>x<\/codeVoice>, the two sets of assignments in the following code sample must be equivalent:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[a[i] = x]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let y = a[i]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Must be equivalent to:]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[a[i] = x]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[let y = x]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "MutableCollection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>MutableCollection<\/decl.name> : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:SM4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence : <ref.protocol usr=\"s:SM\">MutableCollection<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1227,
        "key.modulename" : "Swift",
        "key.name" : "MutableCollection",
        "key.namelength" : 17,
        "key.nameoffset" : 90,
        "key.offset" : 80,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func rotated(by amount: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/Type><\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 266
              }
            ],
            "key.bodylength" : 81,
            "key.bodyoffset" : 311,
            "key.doc.column" : 17,
            "key.doc.comment" : "- Returns: A mutable and bidirectional collection with its elements rotated by the given\n`amount`.",
            "key.doc.declaration" : "public func rotated(by amount: Int) -> Self",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift\" line=\"12\" column=\"17\"><Name>rotated(by:)<\/Name><USR>s:SM10AlgorithmsSKRzrlE7rotated2byxSi_tF<\/USR><Declaration>public func rotated(by amount: Int) -&gt; Self<\/Declaration><CommentParts><ResultDiscussion><Para>A mutable and bidirectional collection with its elements rotated by the given <codeVoice>amount<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 12,
            "key.doc.name" : "rotated(by:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A mutable and bidirectional collection with its elements rotated by the given `amount`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 111,
            "key.docoffset" : 151,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>rotated<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>by<\/decl.var.parameter.argument_label> <decl.var.parameter.name>amount<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 120,
            "key.name" : "rotated(by:)",
            "key.namelength" : 23,
            "key.nameoffset" : 278,
            "key.offset" : 273,
            "key.parsed_declaration" : "public func rotated(by amount: Int) -> Self",
            "key.parsed_scope.end" : 16,
            "key.parsed_scope.start" : 12,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var copy: <Type usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>copy<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 15,
                "key.name" : "copy",
                "key.namelength" : 4,
                "key.nameoffset" : 324,
                "key.offset" : 320,
                "key.parsed_declaration" : "var copy = self",
                "key.parsed_scope.end" : 13,
                "key.parsed_scope.start" : 13,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:SM10AlgorithmsSKRzrlE7rotated2byxSi_tF4copyL_xvp"
              }
            ],
            "key.typename" : "<Self where Self : BidirectionalCollection, Self : MutableCollection> (Self) -> (Int) -> Self",
            "key.typeusr" : "$S2byxSi_tcD",
            "key.usr" : "s:SM10AlgorithmsSKRzrlE7rotated2byxSi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public mutating func rotate(by amount: <Type usr=\"s:Si\">Int<\/Type>)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.mutating",
                "key.length" : 8,
                "key.offset" : 475
              },
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 468
              }
            ],
            "key.bodylength" : 361,
            "key.bodyoffset" : 513,
            "key.doc.column" : 26,
            "key.doc.comment" : "Rotates the elements contained herein by the given `amount`.",
            "key.doc.declaration" : "public mutating func rotate(by amount: Int)",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift\" line=\"19\" column=\"26\"><Name>rotate(by:)<\/Name><USR>s:SM10AlgorithmsSKRzrlE6rotate2byySi_tF<\/USR><Declaration>public mutating func rotate(by amount: Int)<\/Declaration><CommentParts><Abstract><Para>Rotates the elements contained herein by the given <codeVoice>amount<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 19,
            "key.doc.name" : "rotate(by:)",
            "key.doc.type" : "Function",
            "key.doclength" : 65,
            "key.docoffset" : 399,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>rotate<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>by<\/decl.var.parameter.argument_label> <decl.var.parameter.name>amount<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 391,
            "key.name" : "rotate(by:)",
            "key.namelength" : 22,
            "key.nameoffset" : 489,
            "key.offset" : 484,
            "key.parsed_declaration" : "public mutating func rotate(by amount: Int)",
            "key.parsed_scope.end" : 26,
            "key.parsed_scope.start" : 19,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let amount: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>amount<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 59,
                "key.name" : "amount",
                "key.namelength" : 6,
                "key.nameoffset" : 568,
                "key.offset" : 564,
                "key.parsed_declaration" : "let amount = (amount < 0 ? count + amount : amount) % count",
                "key.parsed_scope.end" : 21,
                "key.parsed_scope.start" : 21,
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:SM10AlgorithmsSKRzrlE6rotate2byySi_tF6amountL0_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>let amountIndex: <Type usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/Type>.Index<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>amountIndex<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/ref.generic_type_param>.Index<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 53,
                "key.name" : "amountIndex",
                "key.namelength" : 11,
                "key.nameoffset" : 636,
                "key.offset" : 632,
                "key.parsed_declaration" : "let amountIndex = index(startIndex, offsetBy: amount)",
                "key.parsed_scope.end" : 22,
                "key.parsed_scope.start" : 22,
                "key.typename" : "Self.Index",
                "key.typeusr" : "$S5IndexSlQzD",
                "key.usr" : "s:SM10AlgorithmsSKRzrlE6rotate2byySi_tF11amountIndexL_0E0SlQzvp"
              }
            ],
            "key.typename" : "<Self where Self : BidirectionalCollection, Self : MutableCollection> (inout Self) -> (Int) -> ()",
            "key.typeusr" : "$S2byySi_tcD",
            "key.usr" : "s:SM10AlgorithmsSKRzrlE6rotate2byySi_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.private",
            "key.annotated_decl" : "<Declaration>private mutating func reverse(in range: <Type usr=\"s:Sn\">Range<\/Type>&lt;<Type usr=\"s:SM5IndexQa\">Index<\/Type>&gt;)<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.mutating",
                "key.length" : 8,
                "key.offset" : 889
              },
              {
                "key.attribute" : "source.decl.attribute.private",
                "key.length" : 7,
                "key.offset" : 881
              }
            ],
            "key.bodylength" : 368,
            "key.bodyoffset" : 936,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>private<\/syntaxtype.keyword> <syntaxtype.keyword>mutating<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>reverse<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>in<\/decl.var.parameter.argument_label> <decl.var.parameter.name>range<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Sn\">Range<\/ref.struct>&lt;<ref.associatedtype usr=\"s:SM5IndexQa\">Index<\/ref.associatedtype>&gt;<\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 407,
            "key.name" : "reverse(in:)",
            "key.namelength" : 31,
            "key.nameoffset" : 903,
            "key.offset" : 898,
            "key.parsed_declaration" : "private mutating func reverse(in range: Range<Index>)",
            "key.parsed_scope.end" : 39,
            "key.parsed_scope.start" : 28,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SMsSKRzrlE7reverseyyF\">reverse()<\/RelatedName>"
              }
            ],
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var start: <Type usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/Type>.Index<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>start<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/ref.generic_type_param>.Index<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 28,
                "key.name" : "start",
                "key.namelength" : 5,
                "key.nameoffset" : 1080,
                "key.offset" : 1076,
                "key.parsed_declaration" : "var start = range.lowerBound",
                "key.parsed_scope.end" : 32,
                "key.parsed_scope.start" : 32,
                "key.typename" : "Self.Index",
                "key.typeusr" : "$S5IndexSlQzD",
                "key.usr" : "s:SM10AlgorithmsSKRzrlE7reverse33_A91D7B3EE4BC3A607953A410D2027CC6LL2inySny5IndexSlQzG_tF5startL_AFvp"
              },
              {
                "key.annotated_decl" : "<Declaration>var end: <Type usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/Type>.Index<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Rotate.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>end<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:SM10AlgorithmsSKRzrlE4Selfxmfp\">Self<\/ref.generic_type_param>.Index<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 26,
                "key.name" : "end",
                "key.namelength" : 3,
                "key.nameoffset" : 1117,
                "key.offset" : 1113,
                "key.parsed_declaration" : "var end = range.upperBound",
                "key.parsed_scope.end" : 33,
                "key.parsed_scope.start" : 33,
                "key.typename" : "Self.Index",
                "key.typeusr" : "$S5IndexSlQzD",
                "key.usr" : "s:SM10AlgorithmsSKRzrlE7reverse33_A91D7B3EE4BC3A607953A410D2027CC6LL2inySny5IndexSlQzG_tF3endL_AFvp"
              }
            ],
            "key.typename" : "<Self where Self : BidirectionalCollection, Self : MutableCollection> (inout Self) -> (Range<Self.Index>) -> ()",
            "key.typeusr" : "$S2inySny5IndexSlQzG_tcD",
            "key.usr" : "s:SM10AlgorithmsSKRzrlE7reverse33_A91D7B3EE4BC3A607953A410D2027CC6LL2inySny5IndexSlQzG_tF"
          }
        ],
        "key.typename" : "MutableCollection.Protocol",
        "key.typeusr" : "$SSM_pmD",
        "key.usr" : "s:SM"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1225,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>protocol Collection : <Type usr=\"s:ST\">Sequence<\/Type> where <Type usr=\"s:Sl4Selfxmfp\">Self<\/Type>.SubSequence : <Type usr=\"s:Sl\">Collection<\/Type><\/Declaration>",
        "key.bodylength" : 1122,
        "key.bodyoffset" : 101,
        "key.doc.declaration" : "protocol Collection : Sequence where Self.SubSequence : Collection",
        "key.doc.discussion" : [
          {
            "Para" : "Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the `Collection` protocol declares and implements. In addition to the operations that collections inherit from the `Sequence` protocol, you gain access to methods that depend on accessing an element at a specific position in a collection."
          },
          {
            "Para" : "For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `firstSpace` constant is an index into the `text` string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, `firstSpace` is used to extract the prefix that contains elements up to that index."
          },
          {
            "Para" : "You can access an element of a collection through its subscript by using any valid index except the collection’s `endIndex` property. This property is a “past the end” index that does not correspond with any element of the collection."
          },
          {
            "Para" : "Here’s an example of accessing the first character in a string through its subscript:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The `Collection` protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of `text` using the `first` property, which has the value of the first element of the collection, or `nil` if the collection is empty."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s `startIndex` property and finding every successor up to, and including, the `endIndex` property. All other values of the `Index` type, such as the `startIndex` property of a different collection, are invalid indices for this collection."
          },
          {
            "Para" : "Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the `MutableCollection` and `RangeReplaceableCollection` protocols, as well as for the specific type you’re using."
          },
          {
            "Para" : "You can access a slice of a collection through its ranged subscript or by calling methods like `prefix(while:)` or `suffix(_:)`. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics."
          },
          {
            "Para" : "The following example creates a `firstWord` constant by using the `prefix(while:)` method to get a slice of the `text` string."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You can retrieve the same slice using the string’s ranged subscript, which takes a range expression."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "The retrieved slice of `text` is equivalent in each of these cases."
          },
          {
            "Para" : "A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created."
          },
          {
            "Para" : "For example, suppose you have an array holding the number of absences from each class during a session."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:"
          },
          {
            "List-Number" : ""
          },
          {
            "Para" : "Here’s an implementation of those steps:"
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice."
          },
          {
            "Para" : "For example, if you update the last element of the `absences` array from `0` to `2`, the `secondHalf` slice is unchanged."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Although a sequence can be consumed as it is traversed, a collection is guaranteed to be : Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the `contains(_:)` method to test whether a collection includes an element."
          },
          {
            "Para" : "Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the `characters` view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the `Collection` protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add `Collection` conformance to your type, you must declare at least the following requirements:"
          },
          {
            "List-Bullet" : ""
          },
          {
            "Para" : "Types that conform to `Collection` are expected to provide the `startIndex` and `endIndex` properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees."
          },
          {
            "Para" : "The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its `count` property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its `count` property is an O() operation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Collection<\/Name><USR>s:Sl<\/USR><Declaration>protocol Collection : Sequence where Self.SubSequence : Collection<\/Declaration><CommentParts><Abstract><Para>A sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.<\/Para><\/Abstract><Discussion><Para>Collections are used extensively throughout the standard library. When you use arrays, dictionaries, and other collections, you benefit from the operations that the <codeVoice>Collection<\/codeVoice> protocol declares and implements. In addition to the operations that collections inherit from the <codeVoice>Sequence<\/codeVoice> protocol, you gain access to methods that depend on accessing an element at a specific position in a collection.<\/Para><Para>For example, if you want to print only the first word in a string, you can search for the index of the first space, and then create a substring up to that position.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let text = \"Buffalo buffalo buffalo buffalo.\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>firstSpace<\/codeVoice> constant is an index into the <codeVoice>text<\/codeVoice> string—the position of the first space in the string. You can store indices in variables, and pass them to collection algorithms or use them later to access the corresponding element. In the example above, <codeVoice>firstSpace<\/codeVoice> is used to extract the prefix that contains elements up to that index.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Individual Elements<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access an element of a collection through its subscript by using any valid index except the collection’s <codeVoice>endIndex<\/codeVoice> property. This property is a “past the end” index that does not correspond with any element of the collection.<\/Para><Para>Here’s an example of accessing the first character in a string through its subscript:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstChar = text[text.startIndex]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstChar)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"B\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The <codeVoice>Collection<\/codeVoice> protocol declares and provides default implementations for many operations that depend on elements being accessible by their subscript. For example, you can also access the first character of <codeVoice>text<\/codeVoice> using the <codeVoice>first<\/codeVoice> property, which has the value of the first element of the collection, or <codeVoice>nil<\/codeVoice> if the collection is empty.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[print(text.first)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Optional(\"B\")\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can pass only valid indices to collection operations. You can find a complete set of a collection’s valid indices by starting with the collection’s <codeVoice>startIndex<\/codeVoice> property and finding every successor up to, and including, the <codeVoice>endIndex<\/codeVoice> property. All other values of the <codeVoice>Index<\/codeVoice> type, such as the <codeVoice>startIndex<\/codeVoice> property of a different collection, are invalid indices for this collection.<\/Para><Para>Saved indices may become invalid as a result of mutating operations. For more information about index invalidation in mutable collections, see the reference for the <codeVoice>MutableCollection<\/codeVoice> and <codeVoice>RangeReplaceableCollection<\/codeVoice> protocols, as well as for the specific type you’re using.<\/Para><rawHTML><![CDATA[<h1>]]><\/rawHTML>Accessing Slices of a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>You can access a slice of a collection through its ranged subscript or by calling methods like <codeVoice>prefix(while:)<\/codeVoice> or <codeVoice>suffix(_:)<\/codeVoice>. A slice of a collection can contain zero or more of the original collection’s elements and shares the original collection’s semantics.<\/Para><Para>The following example creates a <codeVoice>firstWord<\/codeVoice> constant by using the <codeVoice>prefix(while:)<\/codeVoice> method to get a slice of the <codeVoice>text<\/codeVoice> string.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let firstWord = text.prefix(while: { $0 != \" \" })]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(firstWord)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You can retrieve the same slice using the string’s ranged subscript, which takes a range expression.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[if let firstSpace = text.firstIndex(of: \" \") {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(text[..<firstSpace]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    \/\/ Prints \"Buffalo\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>The retrieved slice of <codeVoice>text<\/codeVoice> is equivalent in each of these cases.<\/Para><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Share Indices<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A collection and its slices share the same indices. An element of a collection is located under the same index in a slice as in the base collection, as long as neither the collection nor the slice has been mutated since the slice was created.<\/Para><Para>For example, suppose you have an array holding the number of absences from each class during a session.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var absences = [0, 2, 0, 4, 0, 3, 1, 0]]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>You’re tasked with finding the day with the most absences in the second half of the session. To find the index of the day in question, follow these steps:<\/Para><List-Number><Item><Para>Create a slice of the <codeVoice>absences<\/codeVoice> array that holds the second half of the days.<\/Para><\/Item><Item><Para>Use the <codeVoice>max(by:)<\/codeVoice> method to determine the index of the day with the most absences.<\/Para><\/Item><Item><Para>Print the result using the index found in step 2 on the original <codeVoice>absences<\/codeVoice> array.<\/Para><\/Item><\/List-Number><Para>Here’s an implementation of those steps:<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let secondHalf = absences.suffix(absences.count \/ 2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[if let i = secondHalf.indices.max(by: { secondHalf[$0] < secondHalf[$1] }) {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(\"Highest second-half absences: \\(absences[i])\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"Highest second-half absences: 3\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h2>]]><\/rawHTML>Slices Inherit Collection Semantics<rawHTML><![CDATA[<\/h2>]]><\/rawHTML><Para>A slice inherits the value or reference semantics of its base collection. That is, when working with a slice of a mutable collection that has value semantics, such as an array, mutating the original collection triggers a copy of that collection and does not affect the contents of the slice.<\/Para><Para>For example, if you update the last element of the <codeVoice>absences<\/codeVoice> array from <codeVoice>0<\/codeVoice> to <codeVoice>2<\/codeVoice>, the <codeVoice>secondHalf<\/codeVoice> slice is unchanged.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[absences[7] = 2]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(absences)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 2, 0, 4, 0, 3, 1, 2]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(secondHalf)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[0, 3, 1, 0]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Traversing a Collection<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Although a sequence can be consumed as it is traversed, a collection is guaranteed to be <emphasis>multipass<\/emphasis>: Any element can be repeatedly accessed by saving its index. Moreover, a collection’s indices form a finite range of the positions of the collection’s elements. The fact that all collections are finite guarantees the safety of many sequence operations, such as using the <codeVoice>contains(_:)<\/codeVoice> method to test whether a collection includes an element.<\/Para><Para>Iterating over the elements of a collection by their positions yields the same elements in the same order as iterating over that collection using its iterator. This example demonstrates that the <codeVoice>characters<\/codeVoice> view of a string returns the same characters in the same order whether the view’s indices or the view itself is being iterated.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[let word = \"Swift\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for character in word {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(character)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[for i in word.indices {]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[    print(word[i])]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[}]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"S\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"w\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"i\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"f\"]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"t\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the Collection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>If you create a custom sequence that can provide repeated access to its elements, make sure that its type conforms to the <codeVoice>Collection<\/codeVoice> protocol in order to give a more useful and more efficient interface for sequence and collection operations. To add <codeVoice>Collection<\/codeVoice> conformance to your type, you must declare at least the following requirements:<\/Para><List-Bullet><Item><Para>The <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties<\/Para><\/Item><Item><Para>A subscript that provides at least read-only access to your type’s elements<\/Para><\/Item><Item><Para>The <codeVoice>index(after:)<\/codeVoice> method for advancing an index into your collection<\/Para><\/Item><\/List-Bullet><rawHTML><![CDATA[<h1>]]><\/rawHTML>Expected Performance<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>Types that conform to <codeVoice>Collection<\/codeVoice> are expected to provide the <codeVoice>startIndex<\/codeVoice> and <codeVoice>endIndex<\/codeVoice> properties and subscript access to elements as O(1) operations. Types that are not able to guarantee this performance must document the departure, because many collection operations depend on O(1) subscripting performance for their own performance guarantees.<\/Para><Para>The performance of some collection operations depends on the type of index that the collection provides. For example, a random-access collection, which can measure the distance between two indices in O(1) time, can calculate its <codeVoice>count<\/codeVoice> property in O(1) time. Conversely, because a forward or bidirectional collection must traverse the entire collection to count the number of contained elements, accessing its <codeVoice>count<\/codeVoice> property is an O(<emphasis>n<\/emphasis>) operation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Collection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>Collection<\/decl.name> : <ref.protocol usr=\"s:ST\">Sequence<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sl4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1145,
        "key.modulename" : "Swift",
        "key.name" : "Collection",
        "key.namelength" : 10,
        "key.nameoffset" : 89,
        "key.offset" : 79,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func split(at index: <Type usr=\"s:Sl5IndexQa\">Index<\/Type>) -&gt; (<Type usr=\"s:Sl11SubSequenceQa\">SubSequence<\/Type>, <Type usr=\"s:Sl11SubSequenceQa\">SubSequence<\/Type>)?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 277
              }
            ],
            "key.bodylength" : 150,
            "key.bodyoffset" : 344,
            "key.doc.column" : 17,
            "key.doc.comment" : "- Returns: A two-tuple containing two arrays of `Elements` split at the given `index`,\nif the given `index` is in the bounds of `self.` Otherwise, `nil`.",
            "key.doc.declaration" : "public func split(at index: Index) -> (SubSequence, SubSequence)?",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift\" line=\"12\" column=\"17\"><Name>split(at:)<\/Name><USR>s:Sl10AlgorithmsE5split2at11SubSequenceQz_AEtSg5IndexQz_tF<\/USR><Declaration>public func split(at index: Index) -&gt; (SubSequence, SubSequence)?<\/Declaration><CommentParts><ResultDiscussion><Para>A two-tuple containing two arrays of <codeVoice>Elements<\/codeVoice> split at the given <codeVoice>index<\/codeVoice>, if the given <codeVoice>index<\/codeVoice> is in the bounds of <codeVoice>self.<\/codeVoice> Otherwise, <codeVoice>nil<\/codeVoice>.<\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
            "key.doc.line" : 12,
            "key.doc.name" : "split(at:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A two-tuple containing two arrays of `Elements` split at the given `index`, if the given `index` is in the bounds of `self.` Otherwise, `nil`."
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 166,
            "key.docoffset" : 107,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>split<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>at<\/decl.var.parameter.argument_label> <decl.var.parameter.name>index<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.associatedtype usr=\"s:Sl11SubSequenceQa\">SubSequence<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.associatedtype usr=\"s:Sl11SubSequenceQa\">SubSequence<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 211,
            "key.name" : "split(at:)",
            "key.namelength" : 22,
            "key.nameoffset" : 289,
            "key.offset" : 284,
            "key.parsed_declaration" : "public func split(at index: Index) -> (SubSequence, SubSequence)?",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 12,
            "key.related_decls" : [
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF\">split(maxSplits: Int = default, omittingEmptySubsequences: Bool = default, whereSeparator: (Self.Element) throws -&gt; Bool) rethrows -&gt; [Self.SubSequence]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:SlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF\">split(separator: Self.Element, maxSplits: Int = default, omittingEmptySubsequences: Bool = default) -&gt; [Self.SubSequence]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:ST5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF\">split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -&gt; Bool) rethrows -&gt; [Self.SubSequence]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:STsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF\">split(separator: Self.Element, maxSplits: Int = default, omittingEmptySubsequences: Bool = default) -&gt; [Self.SubSequence]<\/RelatedName>"
              },
              {
                "key.annotated_decl" : "<RelatedName usr=\"s:STss11AnySequenceVy7ElementQzG03SubB0RtzrlE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSayAEGSi_S2bADKXEtKF\">split(maxSplits: Int = default, omittingEmptySubsequences: Bool = default, whereSeparator: (Self.Element) throws -&gt; Bool) rethrows -&gt; [AnySequence&lt;Self.Element&gt;]<\/RelatedName>"
              }
            ],
            "key.substructure" : [

            ],
            "key.typename" : "<Self where Self : Collection> (Self) -> (Self.Index) -> (Self.SubSequence, Self.SubSequence)?",
            "key.typeusr" : "$S2at11SubSequenceQz_ACtSg5IndexQz_tcD",
            "key.usr" : "s:Sl10AlgorithmsE5split2at11SubSequenceQz_AEtSg5IndexQz_tF"
          },
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func splitAndExtractElement(at index: <Type usr=\"s:Sl5IndexQa\">Index<\/Type>) -&gt; (<Type usr=\"s:Sl11SubSequenceQa\">SubSequence<\/Type>, <Type usr=\"s:Sl7ElementQa\">Element<\/Type>, <Type usr=\"s:Sl11SubSequenceQa\">SubSequence<\/Type>)?<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 823
              }
            ],
            "key.bodylength" : 305,
            "key.bodyoffset" : 916,
            "key.doc.column" : 17,
            "key.doc.comment" : "- returns: A three-tuple containing:\n\n- The elements to the left of the element at the given `index`\n- The element at the given `index`\n- The elements to the right of the element at the given `index`\n\nif the given `index` is in the bounds of `self.` Otherwise, `nil`.",
            "key.doc.declaration" : "public func splitAndExtractElement(at index: Index) -> (SubSequence, Element, SubSequence)?",
            "key.doc.discussion" : [
              {
                "List-Bullet" : ""
              },
              {
                "Para" : "if the given `index` is in the bounds of `self.` Otherwise, `nil`."
              }
            ],
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift\" line=\"24\" column=\"17\"><Name>splitAndExtractElement(at:)<\/Name><USR>s:Sl10AlgorithmsE22splitAndExtractElement2at11SubSequenceQz_0E0QzAEtSg5IndexQz_tF<\/USR><Declaration>public func splitAndExtractElement(at index: Index) -&gt; (SubSequence, Element, SubSequence)?<\/Declaration><CommentParts><ResultDiscussion><Para>A three-tuple containing:<\/Para><\/ResultDiscussion><Discussion><List-Bullet><Item><Para>The elements to the left of the element at the given <codeVoice>index<\/codeVoice><\/Para><\/Item><Item><Para>The element at the given <codeVoice>index<\/codeVoice><\/Para><\/Item><Item><Para>The elements to the right of the element at the given <codeVoice>index<\/codeVoice><\/Para><\/Item><\/List-Bullet><Para>if the given <codeVoice>index<\/codeVoice> is in the bounds of <codeVoice>self.<\/codeVoice> Otherwise, <codeVoice>nil<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Function>",
            "key.doc.line" : 24,
            "key.doc.name" : "splitAndExtractElement(at:)",
            "key.doc.result_discussion" : [
              {
                "Para" : "A three-tuple containing:"
              }
            ],
            "key.doc.type" : "Function",
            "key.doclength" : 318,
            "key.docoffset" : 501,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>splitAndExtractElement<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>at<\/decl.var.parameter.argument_label> <decl.var.parameter.name>index<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.associatedtype usr=\"s:Sl11SubSequenceQa\">SubSequence<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.associatedtype usr=\"s:Sl11SubSequenceQa\">SubSequence<\/ref.associatedtype><\/tuple.element.type><\/tuple.element>)<\/tuple>?<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 392,
            "key.name" : "splitAndExtractElement(at:)",
            "key.namelength" : 39,
            "key.nameoffset" : 835,
            "key.offset" : 830,
            "key.parsed_declaration" : "public func splitAndExtractElement(at index: Index) -> (SubSequence, Element, SubSequence)?",
            "key.parsed_scope.end" : 31,
            "key.parsed_scope.start" : 24,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>let element: <Type usr=\"s:Sl4Selfxmfp\">Self<\/Type>.Element<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>element<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:Sl4Selfxmfp\">Self<\/ref.generic_type_param>.Element<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 25,
                "key.name" : "element",
                "key.namelength" : 7,
                "key.nameoffset" : 1047,
                "key.offset" : 1043,
                "key.parsed_declaration" : "let element = self[index]",
                "key.parsed_scope.end" : 27,
                "key.parsed_scope.start" : 27,
                "key.typename" : "Self.Element",
                "key.typeusr" : "$S7ElementSTQzD",
                "key.usr" : "s:Sl10AlgorithmsE22splitAndExtractElement2at11SubSequenceQz_0E0QzAEtSg5IndexQz_tF7elementL_AGvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let left: <Type usr=\"s:Sl4Selfxmfp\">Self<\/Type>.SubSequence<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>left<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:Sl4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 37,
                "key.name" : "left",
                "key.namelength" : 4,
                "key.nameoffset" : 1081,
                "key.offset" : 1077,
                "key.parsed_declaration" : "let left = self[startIndex ..< index]",
                "key.parsed_scope.end" : 28,
                "key.parsed_scope.start" : 28,
                "key.typename" : "Self.SubSequence",
                "key.typeusr" : "$S11SubSequenceSTQzD",
                "key.usr" : "s:Sl10AlgorithmsE22splitAndExtractElement2at11SubSequenceQz_0E0QzAEtSg5IndexQz_tF4leftL_AEvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let right: <Type usr=\"s:Sl4Selfxmfp\">Self<\/Type>.SubSequence<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Split.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>right<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:Sl4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 55,
                "key.name" : "right",
                "key.namelength" : 5,
                "key.nameoffset" : 1127,
                "key.offset" : 1123,
                "key.parsed_declaration" : "let right = self[self.index(after: index) ..< endIndex]",
                "key.parsed_scope.end" : 29,
                "key.parsed_scope.start" : 29,
                "key.typename" : "Self.SubSequence",
                "key.typeusr" : "$S11SubSequenceSTQzD",
                "key.usr" : "s:Sl10AlgorithmsE22splitAndExtractElement2at11SubSequenceQz_0E0QzAEtSg5IndexQz_tF5rightL_AEvp"
              }
            ],
            "key.typename" : "<Self where Self : Collection> (Self) -> (Self.Index) -> (Self.SubSequence, Self.Element, Self.SubSequence)?",
            "key.typeusr" : "$S2at11SubSequenceQz_7ElementQzACtSg5IndexQz_tcD",
            "key.usr" : "s:Sl10AlgorithmsE22splitAndExtractElement2at11SubSequenceQz_0E0QzAEtSg5IndexQz_tF"
          }
        ],
        "key.typename" : "Collection.Protocol",
        "key.typeusr" : "$SSl_pmD",
        "key.usr" : "s:Sl"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 1506,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.annotated_decl" : "<Declaration>protocol RangeReplaceableCollection : <Type usr=\"s:Sl\">Collection<\/Type> where <Type usr=\"s:Sm4Selfxmfp\">Self<\/Type>.SubSequence : <Type usr=\"s:Sm\">RangeReplaceableCollection<\/Type><\/Declaration>",
        "key.bodylength" : 1237,
        "key.bodyoffset" : 142,
        "key.doc.declaration" : "protocol RangeReplaceableCollection : Collection where Self.SubSequence : RangeReplaceableCollection",
        "key.doc.discussion" : [
          {
            "Para" : "Range-replaceable collections provide operations that insert and remove elements. For example, you can add elements to an array of strings by calling any of the inserting or appending operations that the `RangeReplaceableCollection` protocol defines."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Likewise, `RangeReplaceableCollection` types can remove one or more elements using a single operation."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "Lastly, use the eponymous `replaceSubrange(_:with:)` method to replace a subrange of elements with the contents of another collection. Here, three elements in the middle of an array of integers are replaced by the five elements of a `Repeated<Int>` instance."
          },
          {
            "CodeListing" : ""
          },
          {
            "Para" : "To add `RangeReplaceableCollection` conformance to your custom collection, add an empty initializer and the `replaceSubrange(_:with:)` method to your custom type. `RangeReplaceableCollection` provides default implementations of all its other methods using this initializer and method. For example, the `removeSubrange(_:)` method is implemented by calling `replaceSubrange(_:with:)` with an empty collection for the `newElements` parameter. You can override any of the protocol’s required methods to provide your own custom implementation."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>RangeReplaceableCollection<\/Name><USR>s:Sm<\/USR><Declaration>protocol RangeReplaceableCollection : Collection where Self.SubSequence : RangeReplaceableCollection<\/Declaration><CommentParts><Abstract><Para>A collection that supports replacement of an arbitrary subrange of elements with the elements of another collection.<\/Para><\/Abstract><Discussion><Para>Range-replaceable collections provide operations that insert and remove elements. For example, you can add elements to an array of strings by calling any of the inserting or appending operations that the <codeVoice>RangeReplaceableCollection<\/codeVoice> protocol defines.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[var bugs = [\"Aphid\", \"Damselfly\"]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[bugs.append(\"Earwig\")]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[bugs.insert(contentsOf: [\"Bumblebee\", \"Cicada\"], at: 1)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(bugs)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Likewise, <codeVoice>RangeReplaceableCollection<\/codeVoice> types can remove one or more elements using a single operation.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[bugs.removeLast()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[bugs.removeSubrange(1...2)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(bugs)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[\"Aphid\", \"Damselfly\"]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[bugs.removeAll()]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[print(bugs)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[\/\/ Prints \"[]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><Para>Lastly, use the eponymous <codeVoice>replaceSubrange(_:with:)<\/codeVoice> method to replace a subrange of elements with the contents of another collection. Here, three elements in the middle of an array of integers are replaced by the five elements of a <codeVoice>Repeated&lt;Int&gt;<\/codeVoice> instance.<\/Para><CodeListing language=\"swift\"><zCodeLineNumbered><![CDATA[ var nums = [10, 20, 30, 40, 50]]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[ nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[ print(nums)]]><\/zCodeLineNumbered><zCodeLineNumbered><![CDATA[ \/\/ Prints \"[10, 1, 1, 1, 1, 1, 50]\"]]><\/zCodeLineNumbered><zCodeLineNumbered><\/zCodeLineNumbered><\/CodeListing><rawHTML><![CDATA[<h1>]]><\/rawHTML>Conforming to the RangeReplaceableCollection Protocol<rawHTML><![CDATA[<\/h1>]]><\/rawHTML><Para>To add <codeVoice>RangeReplaceableCollection<\/codeVoice> conformance to your custom collection, add an empty initializer and the <codeVoice>replaceSubrange(_:with:)<\/codeVoice> method to your custom type. <codeVoice>RangeReplaceableCollection<\/codeVoice> provides default implementations of all its other methods using this initializer and method. For example, the <codeVoice>removeSubrange(_:)<\/codeVoice> method is implemented by calling <codeVoice>replaceSubrange(_:with:)<\/codeVoice> with an empty collection for the <codeVoice>newElements<\/codeVoice> parameter. You can override any of the protocol’s required methods to provide your own custom implementation.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "RangeReplaceableCollection",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.protocol><syntaxtype.keyword>protocol<\/syntaxtype.keyword> <decl.name>RangeReplaceableCollection<\/decl.name> : <ref.protocol usr=\"s:Sl\">Collection<\/ref.protocol> <syntaxtype.keyword>where<\/syntaxtype.keyword> <decl.generic_type_requirement><ref.generic_type_param usr=\"s:Sm4Selfxmfp\">Self<\/ref.generic_type_param>.SubSequence : <ref.protocol usr=\"s:Sm\">RangeReplaceableCollection<\/ref.protocol><\/decl.generic_type_requirement><\/decl.protocol>",
        "key.groupname" : "Collection",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 1296,
        "key.modulename" : "Swift",
        "key.name" : "RangeReplaceableCollection",
        "key.namelength" : 26,
        "key.nameoffset" : 94,
        "key.offset" : 84,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.public",
            "key.annotated_decl" : "<Declaration>public func stableSort(_ isOrderedBefore: @escaping (<Type usr=\"s:Sl7ElementQa\">Element<\/Type>, <Type usr=\"s:Sl7ElementQa\">Element<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type>) -&gt; [<Type usr=\"s:Sl7ElementQa\">Element<\/Type>]<\/Declaration>",
            "key.attributes" : [
              {
                "key.attribute" : "source.decl.attribute.public",
                "key.length" : 6,
                "key.offset" : 194
              }
            ],
            "key.bodylength" : 1089,
            "key.bodyoffset" : 288,
            "key.doc.column" : 17,
            "key.doc.comment" : "The elements of `Self` sorted stably.",
            "key.doc.declaration" : "public func stableSort(_ isOrderedBefore: @escaping (Element, Element) -> Bool) -> [Element]",
            "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
            "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift\" line=\"11\" column=\"17\"><Name>stableSort(_:)<\/Name><USR>s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF<\/USR><Declaration>public func stableSort(_ isOrderedBefore: @escaping (Element, Element) -&gt; Bool) -&gt; [Element]<\/Declaration><CommentParts><Abstract><Para>The elements of <codeVoice>Self<\/codeVoice> sorted stably.<\/Para><\/Abstract><\/CommentParts><\/Function>",
            "key.doc.line" : 11,
            "key.doc.name" : "stableSort(_:)",
            "key.doc.type" : "Function",
            "key.doclength" : 42,
            "key.docoffset" : 148,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>stableSort<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>isOrderedBefore<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@escaping<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> (<decl.var.parameter><decl.var.parameter.type><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.type><ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype>[<ref.associatedtype usr=\"s:Sl7ElementQa\">Element<\/ref.associatedtype>]<\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Collection",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 1177,
            "key.name" : "stableSort(_:)",
            "key.namelength" : 67,
            "key.nameoffset" : 206,
            "key.offset" : 201,
            "key.parsed_declaration" : "public func stableSort(_ isOrderedBefore: @escaping (Element, Element) -> Bool) -> [Element]",
            "key.parsed_scope.end" : 50,
            "key.parsed_scope.start" : 11,
            "key.substructure" : [
              {
                "key.annotated_decl" : "<Declaration>var result: <Type usr=\"s:Sm10AlgorithmsSi5IndexRtzrlE4Selfxmfp\">Self<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>result<\/decl.name>: <decl.var.type><ref.generic_type_param usr=\"s:Sm10AlgorithmsSi5IndexRtzrlE4Selfxmfp\">Self<\/ref.generic_type_param><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 17,
                "key.name" : "result",
                "key.namelength" : 6,
                "key.nameoffset" : 302,
                "key.offset" : 298,
                "key.parsed_declaration" : "var result = self",
                "key.parsed_scope.end" : 13,
                "key.parsed_scope.start" : 13,
                "key.typename" : "Self",
                "key.typeusr" : "$SxD",
                "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF6resultL_xvp"
              },
              {
                "key.annotated_decl" : "<Declaration>let count: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>let<\/syntaxtype.keyword> <decl.name>count<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 24,
                "key.name" : "count",
                "key.namelength" : 5,
                "key.nameoffset" : 328,
                "key.offset" : 324,
                "key.parsed_declaration" : "let count = result.count",
                "key.parsed_scope.end" : 14,
                "key.parsed_scope.start" : 14,
                "key.related_decls" : [
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:Sl5countSivp\">count<\/RelatedName>"
                  },
                  {
                    "key.annotated_decl" : "<RelatedName usr=\"s:SlsE5countSivp\">count<\/RelatedName>"
                  }
                ],
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF5countL_Sivp"
              },
              {
                "key.annotated_decl" : "<Declaration>var aux: [<Type usr=\"s:Sm10AlgorithmsSi5IndexRtzrlE4Selfxmfp\">Self<\/Type>.Element]<\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>aux<\/decl.name>: <decl.var.type>[<ref.generic_type_param usr=\"s:Sm10AlgorithmsSi5IndexRtzrlE4Selfxmfp\">Self<\/ref.generic_type_param>.Element]<\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 23,
                "key.name" : "aux",
                "key.namelength" : 3,
                "key.nameoffset" : 362,
                "key.offset" : 358,
                "key.parsed_declaration" : "var aux: [Element] = []",
                "key.parsed_scope.end" : 16,
                "key.parsed_scope.start" : 16,
                "key.typename" : "[Self.Element]",
                "key.typeusr" : "$SSay7ElementSTQzGD",
                "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF3auxL_AGvp"
              },
              {
                "key.accessibility" : "source.lang.swift.accessibility.private",
                "key.annotated_decl" : "<Declaration>func merge(_ lo: <Type usr=\"s:Sl5IndexQa\">Index<\/Type>, _ mid: <Type usr=\"s:Sl5IndexQa\">Index<\/Type>, _ hi: <Type usr=\"s:Sl5IndexQa\">Index<\/Type>)<\/Declaration>",
                "key.bodylength" : 581,
                "key.bodyoffset" : 491,
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>merge<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>lo<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>mid<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>hi<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.associatedtype usr=\"s:Sl5IndexQa\">Index<\/ref.associatedtype><\/decl.var.parameter.type><\/decl.var.parameter>)<\/decl.function.free>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.function.free",
                "key.length" : 634,
                "key.name" : "merge(_:_:_:)",
                "key.namelength" : 45,
                "key.nameoffset" : 444,
                "key.offset" : 439,
                "key.parsed_declaration" : "func merge(_ lo: Index, _ mid: Index, _ hi: Index)",
                "key.parsed_scope.end" : 40,
                "key.parsed_scope.start" : 19,
                "key.substructure" : [
                  {
                    "key.annotated_decl" : "<Declaration>var i: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                    "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>i<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                    "key.groupname" : "Collection",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 10,
                    "key.name" : "i",
                    "key.namelength" : 1,
                    "key.nameoffset" : 559,
                    "key.offset" : 555,
                    "key.parsed_declaration" : "var i = lo",
                    "key.parsed_scope.end" : 23,
                    "key.parsed_scope.start" : 23,
                    "key.typename" : "Int",
                    "key.typeusr" : "$SSiD",
                    "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF5mergeL_yySi_S2itSmRzSiACRSlF1iL_Sivp"
                  },
                  {
                    "key.annotated_decl" : "<Declaration>var j: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                    "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                    "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>j<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                    "key.groupname" : "Collection",
                    "key.kind" : "source.lang.swift.decl.var.local",
                    "key.length" : 11,
                    "key.name" : "j",
                    "key.namelength" : 1,
                    "key.nameoffset" : 582,
                    "key.offset" : 578,
                    "key.parsed_declaration" : "var j = mid",
                    "key.parsed_scope.end" : 24,
                    "key.parsed_scope.start" : 24,
                    "key.typename" : "Int",
                    "key.typeusr" : "$SSiD",
                    "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF5mergeL_yySi_S2itSmRzSiACRSlF1jL_Sivp"
                  }
                ],
                "key.typename" : "<Self where Self : RangeReplaceableCollection, Self.Index == Int> (Self.Index, Self.Index, Self.Index) -> ()",
                "key.typeusr" : "$SyySi_S2itcSmRzSi5IndexRtzluD",
                "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF5mergeL_yySi_S2itSmRzSiACRSlF"
              },
              {
                "key.annotated_decl" : "<Declaration>var sz: <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
                "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
                "key.fully_annotated_decl" : "<decl.var.local><syntaxtype.keyword>var<\/syntaxtype.keyword> <decl.name>sz<\/decl.name>: <decl.var.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.type><\/decl.var.local>",
                "key.groupname" : "Collection",
                "key.kind" : "source.lang.swift.decl.var.local",
                "key.length" : 15,
                "key.name" : "sz",
                "key.namelength" : 2,
                "key.nameoffset" : 1087,
                "key.offset" : 1083,
                "key.parsed_declaration" : "var sz: Int = 1",
                "key.parsed_scope.end" : 42,
                "key.parsed_scope.start" : 42,
                "key.typename" : "Int",
                "key.typeusr" : "$SSiD",
                "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF2szL_Sivp"
              }
            ],
            "key.typename" : "<Self where Self : RangeReplaceableCollection, Self.Index == Int> (Self) -> (@escaping (Self.Element, Self.Element) -> Bool) -> [Self.Element]",
            "key.typeusr" : "$SySay7ElementQzGSbAB_ABtccD",
            "key.usr" : "s:Sm10AlgorithmsSi5IndexRtzrlE10stableSortySay7ElementQzGSbAF_AFtcF"
          }
        ],
        "key.typename" : "RangeReplaceableCollection.Protocol",
        "key.typeusr" : "$SSm_pmD",
        "key.usr" : "s:Sm"
      },
      {
        "key.annotated_decl" : "<Declaration>struct Int : <Type usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/Type>, <Type usr=\"s:SZ\">SignedInteger<\/Type><\/Declaration>",
        "key.bodylength" : 107,
        "key.bodyoffset" : 1397,
        "key.doc.declaration" : "struct Int : FixedWidthInteger, SignedInteger",
        "key.doc.discussion" : [
          {
            "Para" : "On 32-bit platforms, `Int` is the same size as `Int32`, and on 64-bit platforms, `Int` is the same size as `Int64`."
          }
        ],
        "key.doc.full_as_xml" : "<Class><Name>Int<\/Name><USR>s:Si<\/USR><Declaration>struct Int : FixedWidthInteger, SignedInteger<\/Declaration><CommentParts><Abstract><Para>A signed integer value type.<\/Para><\/Abstract><Discussion><Para>On 32-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int32<\/codeVoice>, and on 64-bit platforms, <codeVoice>Int<\/codeVoice> is the same size as <codeVoice>Int64<\/codeVoice>.<\/Para><\/Discussion><\/CommentParts><\/Class>",
        "key.doc.name" : "Int",
        "key.doc.type" : "Class",
        "key.fully_annotated_decl" : "<decl.struct><syntaxtype.keyword>struct<\/syntaxtype.keyword> <decl.name>Int<\/decl.name> : <ref.protocol usr=\"s:s17FixedWidthIntegerP\">FixedWidthInteger<\/ref.protocol>, <ref.protocol usr=\"s:SZ\">SignedInteger<\/ref.protocol><\/decl.struct>",
        "key.groupname" : "Math\/Integers",
        "key.is_system" : true,
        "key.kind" : "source.lang.swift.decl.extension",
        "key.length" : 123,
        "key.modulename" : "Swift",
        "key.name" : "Int",
        "key.namelength" : 3,
        "key.nameoffset" : 1392,
        "key.offset" : 1382,
        "key.substructure" : [
          {
            "key.accessibility" : "source.lang.swift.accessibility.internal",
            "key.annotated_decl" : "<Declaration>func limited(notToExceed maximum: <Type usr=\"s:Si\">Int<\/Type>) -&gt; <Type usr=\"s:Si\">Int<\/Type><\/Declaration>",
            "key.bodylength" : 53,
            "key.bodyoffset" : 1449,
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/StableSort.swift",
            "key.fully_annotated_decl" : "<decl.function.method.instance><syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>limited<\/decl.name>(<decl.var.parameter><decl.var.parameter.argument_label>notToExceed<\/decl.var.parameter.argument_label> <decl.var.parameter.name>maximum<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Si\">Int<\/ref.struct><\/decl.function.returntype><\/decl.function.method.instance>",
            "key.groupname" : "Math\/Integers",
            "key.kind" : "source.lang.swift.decl.function.method.instance",
            "key.length" : 101,
            "key.name" : "limited(notToExceed:)",
            "key.namelength" : 33,
            "key.nameoffset" : 1407,
            "key.offset" : 1402,
            "key.parsed_declaration" : "func limited(notToExceed maximum: Int) -> Int",
            "key.parsed_scope.end" : 56,
            "key.parsed_scope.start" : 54,
            "key.substructure" : [

            ],
            "key.typename" : "(Int) -> (Int) -> Int",
            "key.typeusr" : "$S11notToExceedS2i_tcD",
            "key.usr" : "s:Si10AlgorithmsE7limited11notToExceedS2i_tF"
          }
        ],
        "key.typename" : "Int.Type",
        "key.typeusr" : "$SSimD",
        "key.usr" : "s:Si"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 806,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func swapped&lt;T, U&gt;(_ a: <Type usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1UL_q_mfp\">U<\/Type>) -&gt; (<Type usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1TL_xmfp\">T<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 101
          }
        ],
        "key.bodylength" : 18,
        "key.bodyoffset" : 156,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>swapped<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 67,
        "key.name" : "swapped(_:_:)",
        "key.namelength" : 31,
        "key.nameoffset" : 113,
        "key.offset" : 108,
        "key.parsed_declaration" : "public func swapped <T, U> (_ a: T, _ b: U) -> (U, T)",
        "key.parsed_scope.end" : 12,
        "key.parsed_scope.start" : 10,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF\">swapped(_:_:if:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 122,
            "key.offset" : 122,
            "key.parsed_declaration" : "public func swapped <T, U> (_ a: T, _ b: U) -> (U, T)",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 10,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms7swappedyq__xtx_q_tr0_lF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>U<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "U",
            "key.namelength" : 1,
            "key.nameoffset" : 125,
            "key.offset" : 125,
            "key.parsed_declaration" : "public func swapped <T, U> (_ a: T, _ b: U) -> (U, T)",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 10,
            "key.typename" : "U.Type",
            "key.typeusr" : "$Sq_mD",
            "key.usr" : "s:10Algorithms7swappedyq__xtx_q_tr0_lF1UL_q_mfp"
          }
        ],
        "key.typename" : "<T, U> (T, U) -> (U, T)",
        "key.typeusr" : "$Syq__xtx_q_tcr0_luD",
        "key.usr" : "s:10Algorithms7swappedyq__xtx_q_tr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func swapped&lt;T&gt;(_ a: <Type usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/Type>, if predicate: () -&gt; <Type usr=\"s:Sb\">Bool<\/Type>) -&gt; (<Type usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/Type>, <Type usr=\"s:Sb\">Bool<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 285
          }
        ],
        "key.bodylength" : 55,
        "key.bodyoffset" : 369,
        "key.doc.column" : 13,
        "key.doc.comment" : "- returns: If the given `predicate` is `true`, a tuple of `(b, a, true)`\nOtherwise, `(a, b, false)`",
        "key.doc.declaration" : "public func swapped<T>(_ a: T, _ b: T, if predicate: () -> Bool) -> (T, T, Bool)",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift\" line=\"16\" column=\"13\"><Name>swapped(_:_:if:)<\/Name><USR>s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF<\/USR><Declaration>public func swapped&lt;T&gt;(_ a: T, _ b: T, if predicate: () -&gt; Bool) -&gt; (T, T, Bool)<\/Declaration><CommentParts><ResultDiscussion><Para>If the given <codeVoice>predicate<\/codeVoice> is <codeVoice>true<\/codeVoice>, a tuple of <codeVoice>(b, a, true)<\/codeVoice> Otherwise, <codeVoice>(a, b, false)<\/codeVoice><\/Para><\/ResultDiscussion><\/CommentParts><\/Function>",
        "key.doc.line" : 16,
        "key.doc.name" : "swapped(_:_:if:)",
        "key.doc.result_discussion" : [
          {
            "Para" : "If the given `predicate` is `true`, a tuple of `(b, a, true)` Otherwise, `(a, b, false)`"
          }
        ],
        "key.doc.type" : "Function",
        "key.doclength" : 108,
        "key.docoffset" : 177,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>swapped<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>if<\/decl.var.parameter.argument_label> <decl.var.parameter.name>predicate<\/decl.var.parameter.name>: <decl.var.parameter.type>() -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 133,
        "key.name" : "swapped(_:_:if:)",
        "key.namelength" : 54,
        "key.nameoffset" : 297,
        "key.offset" : 292,
        "key.parsed_declaration" : "public func swapped <T> (_ a: T, _ b: T, if predicate: () -> Bool) -> (T, T, Bool)",
        "key.parsed_scope.end" : 18,
        "key.parsed_scope.start" : 16,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms7swappedyq__xtx_q_tr0_lF\">swapped(_:_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 306,
            "key.offset" : 306,
            "key.parsed_declaration" : "public func swapped <T> (_ a: T, _ b: T, if predicate: () -> Bool) -> (T, T, Bool)",
            "key.parsed_scope.end" : 16,
            "key.parsed_scope.start" : 16,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF1TL_xmfp"
          }
        ],
        "key.typename" : "<T> (T, T, if: () -> Bool) -> (T, T, Bool)",
        "key.typeusr" : "$S__2ifx_xSbtx_xSbyXEtcluD",
        "key.usr" : "s:10Algorithms7swapped__2ifx_xSbtx_xSbyXEtlF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>@discardableResult public func swap&lt;T&gt;(_ a: inout <Type usr=\"s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF1TL_xmfp\">T<\/Type>, _ b: inout <Type usr=\"s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF1TL_xmfp\">T<\/Type>, if predicate: () -&gt; <Type usr=\"s:Sb\">Bool<\/Type>) -&gt; <Type usr=\"s:Sb\">Bool<\/Type><\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 634
          },
          {
            "key.attribute" : "source.decl.attribute.discardableResult",
            "key.length" : 18,
            "key.offset" : 615
          }
        ],
        "key.bodylength" : 85,
        "key.bodyoffset" : 719,
        "key.doc.column" : 13,
        "key.doc.comment" : "If the given predicate is `true`, the given `a` and `b` values are swapped in an `inout`\nfasion, and `true` is returned. Otherwise, no `swap` takes place, and `false` is returned.",
        "key.doc.declaration" : "public func swap<T>(_ a: inout T, _ b: inout T, if predicate: () -> Bool) -> Bool",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift\" line=\"23\" column=\"13\"><Name>swap(_:_:if:)<\/Name><USR>s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF<\/USR><Declaration>public func swap&lt;T&gt;(_ a: inout T, _ b: inout T, if predicate: () -&gt; Bool) -&gt; Bool<\/Declaration><CommentParts><Abstract><Para>If the given predicate is <codeVoice>true<\/codeVoice>, the given <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice> values are swapped in an <codeVoice>inout<\/codeVoice> fasion, and <codeVoice>true<\/codeVoice> is returned. Otherwise, no <codeVoice>swap<\/codeVoice> takes place, and <codeVoice>false<\/codeVoice> is returned.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 23,
        "key.doc.name" : "swap(_:_:if:)",
        "key.doc.type" : "Function",
        "key.doclength" : 188,
        "key.docoffset" : 427,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.attribute.builtin><syntaxtype.attribute.name>@discardableResult<\/syntaxtype.attribute.name><\/syntaxtype.attribute.builtin> <syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>swap<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><syntaxtype.keyword>inout<\/syntaxtype.keyword> <ref.generic_type_param usr=\"s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>if<\/decl.var.parameter.argument_label> <decl.var.parameter.name>predicate<\/decl.var.parameter.name>: <decl.var.parameter.type>() -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.struct usr=\"s:Sb\">Bool<\/ref.struct><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 164,
        "key.name" : "swap(_:_:if:)",
        "key.namelength" : 63,
        "key.nameoffset" : 646,
        "key.offset" : 641,
        "key.parsed_declaration" : "public func swap <T> (_ a: inout T, _ b: inout T, if predicate: () -> Bool) -> Bool",
        "key.parsed_scope.end" : 29,
        "key.parsed_scope.start" : 23,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:s4swapyyxz_xztlF\">swap(_:_:)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/Swap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 652,
            "key.offset" : 652,
            "key.parsed_declaration" : "public func swap <T> (_ a: inout T, _ b: inout T, if predicate: () -> Bool) -> Bool",
            "key.parsed_scope.end" : 23,
            "key.parsed_scope.start" : 23,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF1TL_xmfp"
          }
        ],
        "key.typename" : "<T> (inout T, inout T, if: () -> Bool) -> Bool",
        "key.typeusr" : "$S__2ifSbxz_xzSbyXEtcluD",
        "key.usr" : "s:10Algorithms4swap__2ifSbxz_xzSbyXEtlF"
      }
    ]
  }
}, {
  "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 816,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func map&lt;T, U&gt;(_ a: <Type usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\">T<\/Type>, _ f: (<Type usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\">U<\/Type>) -&gt; (<Type usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\">U<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 153
          }
        ],
        "key.bodylength" : 25,
        "key.bodyoffset" : 217,
        "key.doc.column" : 13,
        "key.doc.comment" : "Applies the given transform `f` to the given values `a` and `b`.",
        "key.doc.declaration" : "public func map<T, U>(_ a: T, _ b: T, _ f: (T) -> U) -> (U, U)",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift\" line=\"10\" column=\"13\"><Name>map(_:_:_:)<\/Name><USR>s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF<\/USR><Declaration>public func map&lt;T, U&gt;(_ a: T, _ b: T, _ f: (T) -&gt; U) -&gt; (U, U)<\/Declaration><CommentParts><Abstract><Para>Applies the given transform <codeVoice>f<\/codeVoice> to the given values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 10,
        "key.doc.name" : "map(_:_:_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 69,
        "key.docoffset" : 84,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>map<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 83,
        "key.name" : "map(_:_:_:)",
        "key.namelength" : 41,
        "key.nameoffset" : 165,
        "key.offset" : 160,
        "key.parsed_declaration" : "public func map <T,U> (_ a: T, _ b: T, _ f: (T) -> U) -> (U,U)",
        "key.parsed_scope.end" : 12,
        "key.parsed_scope.start" : 10,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF\">map(_:_:_:_:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF\">map&lt;T, U&gt;(_: (T, T), _: (T) -&gt; U) -&gt; (U, U)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF\">map&lt;T, U&gt;(_: (T, T, T), _: (T) -&gt; U) -&gt; (U, U, U)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 170,
            "key.offset" : 170,
            "key.parsed_declaration" : "public func map <T,U> (_ a: T, _ b: T, _ f: (T) -> U) -> (U,U)",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 10,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>U<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "U",
            "key.namelength" : 1,
            "key.nameoffset" : 172,
            "key.offset" : 172,
            "key.parsed_declaration" : "public func map <T,U> (_ a: T, _ b: T, _ f: (T) -> U) -> (U,U)",
            "key.parsed_scope.end" : 10,
            "key.parsed_scope.start" : 10,
            "key.typename" : "U.Type",
            "key.typeusr" : "$Sq_mD",
            "key.usr" : "s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF1UL_q_mfp"
          }
        ],
        "key.typename" : "<T, U> (T, T, (T) -> U) -> (U, U)",
        "key.typeusr" : "$Syq__q_tx_xq_xXEtcr0_luD",
        "key.usr" : "s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func map&lt;T, U&gt;(_ a: <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/Type>, _ b: <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/Type>, _ c: <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/Type>, _ f: (<Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/Type>) -&gt; (<Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 319
          }
        ],
        "key.bodylength" : 31,
        "key.bodyoffset" : 393,
        "key.doc.column" : 13,
        "key.doc.comment" : "Applies the given transform `f` to the given values `a` and `b`, `c`.",
        "key.doc.declaration" : "public func map<T, U>(_ a: T, _ b: T, _ c: T, _ f: (T) -> U) -> (U, U, U)",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift\" line=\"15\" column=\"13\"><Name>map(_:_:_:_:)<\/Name><USR>s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF<\/USR><Declaration>public func map&lt;T, U&gt;(_ a: T, _ b: T, _ c: T, _ f: (T) -&gt; U) -&gt; (U, U, U)<\/Declaration><CommentParts><Abstract><Para>Applies the given transform <codeVoice>f<\/codeVoice> to the given values <codeVoice>a<\/codeVoice> and <codeVoice>b<\/codeVoice>, <codeVoice>c<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 15,
        "key.doc.name" : "map(_:_:_:_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 74,
        "key.docoffset" : 245,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>map<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>a<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>b<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>c<\/decl.var.parameter.name>: <decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 99,
        "key.name" : "map(_:_:_:_:)",
        "key.namelength" : 49,
        "key.nameoffset" : 331,
        "key.offset" : 326,
        "key.parsed_declaration" : "public func map <T,U> (_ a: T, _ b: T, _ c: T, _ f: (T) -> U) -> (U,U,U)",
        "key.parsed_scope.end" : 17,
        "key.parsed_scope.start" : 15,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF\">map(_:_:_:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF\">map&lt;T, U&gt;(_: (T, T), _: (T) -&gt; U) -&gt; (U, U)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF\">map&lt;T, U&gt;(_: (T, T, T), _: (T) -&gt; U) -&gt; (U, U, U)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 336,
            "key.offset" : 336,
            "key.parsed_declaration" : "public func map <T,U> (_ a: T, _ b: T, _ c: T, _ f: (T) -> U) -> (U,U,U)",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 15,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>U<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "U",
            "key.namelength" : 1,
            "key.nameoffset" : 338,
            "key.offset" : 338,
            "key.parsed_declaration" : "public func map <T,U> (_ a: T, _ b: T, _ c: T, _ f: (T) -> U) -> (U,U,U)",
            "key.parsed_scope.end" : 15,
            "key.parsed_scope.start" : 15,
            "key.typename" : "U.Type",
            "key.typeusr" : "$Sq_mD",
            "key.usr" : "s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF1UL_q_mfp"
          }
        ],
        "key.typename" : "<T, U> (T, T, T, (T) -> U) -> (U, U, U)",
        "key.typeusr" : "$Syq__q_q_tx_xxq_xXEtcr0_luD",
        "key.usr" : "s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func map&lt;T, U&gt;(_ values: (<Type usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>), _ f: (<Type usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>) -&gt; (<Type usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 506
          }
        ],
        "key.bodylength" : 39,
        "key.bodyoffset" : 572,
        "key.doc.column" : 13,
        "key.doc.comment" : "Applies the given transform `f` to each value of the given tuple `values`.",
        "key.doc.declaration" : "public func map<T, U>(_ values: (T, T), _ f: (T) -> U) -> (U, U)",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift\" line=\"20\" column=\"13\"><Name>map(_:_:)<\/Name><USR>s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF<\/USR><Declaration>public func map&lt;T, U&gt;(_ values: (T, T), _ f: (T) -&gt; U) -&gt; (U, U)<\/Declaration><CommentParts><Abstract><Para>Applies the given transform <codeVoice>f<\/codeVoice> to each value of the given tuple <codeVoice>values<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 20,
        "key.doc.name" : "map(_:_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 79,
        "key.docoffset" : 427,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>map<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>values<\/decl.var.parameter.name>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 99,
        "key.name" : "map(_:_:)",
        "key.namelength" : 43,
        "key.nameoffset" : 518,
        "key.offset" : 513,
        "key.parsed_declaration" : "public func map <T,U> (_ values: (T, T), _ f: (T) -> U) -> (U,U)",
        "key.parsed_scope.end" : 22,
        "key.parsed_scope.start" : 20,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF\">map(_:_:_:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF\">map(_:_:_:_:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF\">map&lt;T, U&gt;(_: (T, T, T), _: (T) -&gt; U) -&gt; (U, U, U)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 523,
            "key.offset" : 523,
            "key.parsed_declaration" : "public func map <T,U> (_ values: (T, T), _ f: (T) -> U) -> (U,U)",
            "key.parsed_scope.end" : 20,
            "key.parsed_scope.start" : 20,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>U<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "U",
            "key.namelength" : 1,
            "key.nameoffset" : 525,
            "key.offset" : 525,
            "key.parsed_declaration" : "public func map <T,U> (_ values: (T, T), _ f: (T) -> U) -> (U,U)",
            "key.parsed_scope.end" : 20,
            "key.parsed_scope.start" : 20,
            "key.typename" : "U.Type",
            "key.typeusr" : "$Sq_mD",
            "key.usr" : "s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF1UL_q_mfp"
          }
        ],
        "key.typename" : "<T, U> ((T, T), (T) -> U) -> (U, U)",
        "key.typeusr" : "$Syq__q_tx_xt_q_xXEtcr0_luD",
        "key.usr" : "s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF"
      },
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.annotated_decl" : "<Declaration>public func map&lt;T, U&gt;(_ values: (<Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>), _ f: (<Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/Type>) -&gt; <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>) -&gt; (<Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>, <Type usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/Type>)<\/Declaration>",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 693
          }
        ],
        "key.bodylength" : 52,
        "key.bodyoffset" : 762,
        "key.doc.column" : 13,
        "key.doc.comment" : "Applies the given transform `f` to each value of the given tuple `values`.",
        "key.doc.declaration" : "public func map<T, U>(_ values: (T, T, T), _ f: (T) -> U) -> (U, U, U)",
        "key.doc.file" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.doc.full_as_xml" : "<Function file=\"\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift\" line=\"25\" column=\"13\"><Name>map(_:_:)<\/Name><USR>s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF<\/USR><Declaration>public func map&lt;T, U&gt;(_ values: (T, T, T), _ f: (T) -&gt; U) -&gt; (U, U, U)<\/Declaration><CommentParts><Abstract><Para>Applies the given transform <codeVoice>f<\/codeVoice> to each value of the given tuple <codeVoice>values<\/codeVoice>.<\/Para><\/Abstract><\/CommentParts><\/Function>",
        "key.doc.line" : 25,
        "key.doc.name" : "map(_:_:)",
        "key.doc.type" : "Function",
        "key.doclength" : 79,
        "key.docoffset" : 614,
        "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
        "key.fully_annotated_decl" : "<decl.function.free><syntaxtype.keyword>public<\/syntaxtype.keyword> <syntaxtype.keyword>func<\/syntaxtype.keyword> <decl.name>map<\/decl.name>&lt;<decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\"><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>, <decl.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\"><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>&gt;(<decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>values<\/decl.var.parameter.name>: <decl.var.parameter.type><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.var.parameter.type><\/decl.var.parameter>, <decl.var.parameter><decl.var.parameter.argument_label>_<\/decl.var.parameter.argument_label> <decl.var.parameter.name>f<\/decl.var.parameter.name>: <decl.var.parameter.type>(<decl.var.parameter><decl.var.parameter.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp\">T<\/ref.generic_type_param><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/decl.function.returntype><\/decl.var.parameter.type><\/decl.var.parameter>) -&gt; <decl.function.returntype><tuple>(<tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>, <tuple.element><tuple.element.type><ref.generic_type_param usr=\"s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp\">U<\/ref.generic_type_param><\/tuple.element.type><\/tuple.element>)<\/tuple><\/decl.function.returntype><\/decl.function.free>",
        "key.kind" : "source.lang.swift.decl.function.free",
        "key.length" : 115,
        "key.name" : "map(_:_:)",
        "key.namelength" : 44,
        "key.nameoffset" : 705,
        "key.offset" : 700,
        "key.parsed_declaration" : "public func map <T,U> (_ values: (T,T,T), _ f: (T) -> U) -> (U,U,U)",
        "key.parsed_scope.end" : 27,
        "key.parsed_scope.start" : 25,
        "key.related_decls" : [
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_tx_xq_xXEtr0_lF\">map(_:_:_:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_q_tx_xxq_xXEtr0_lF\">map(_:_:_:_:)<\/RelatedName>"
          },
          {
            "key.annotated_decl" : "<RelatedName usr=\"s:10Algorithms3mapyq__q_tx_xt_q_xXEtr0_lF\">map&lt;T, U&gt;(_: (T, T), _: (T) -&gt; U) -&gt; (U, U)<\/RelatedName>"
          }
        ],
        "key.substructure" : [
          {
            "key.annotated_decl" : "<Declaration>T<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>T<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "T",
            "key.namelength" : 1,
            "key.nameoffset" : 710,
            "key.offset" : 710,
            "key.parsed_declaration" : "public func map <T,U> (_ values: (T,T,T), _ f: (T) -> U) -> (U,U,U)",
            "key.parsed_scope.end" : 25,
            "key.parsed_scope.start" : 25,
            "key.typename" : "T.Type",
            "key.typeusr" : "$SxmD",
            "key.usr" : "s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1TL_xmfp"
          },
          {
            "key.annotated_decl" : "<Declaration>U<\/Declaration>",
            "key.filepath" : "\/Users\/BEAN\/dn-m\/Frameworks\/Structure\/Sources\/Algorithms\/TupleMap.swift",
            "key.fully_annotated_decl" : "<decl.generic_type_param><decl.generic_type_param.name>U<\/decl.generic_type_param.name><\/decl.generic_type_param>",
            "key.kind" : "source.lang.swift.decl.generic_type_param",
            "key.length" : 1,
            "key.name" : "U",
            "key.namelength" : 1,
            "key.nameoffset" : 712,
            "key.offset" : 712,
            "key.parsed_declaration" : "public func map <T,U> (_ values: (T,T,T), _ f: (T) -> U) -> (U,U,U)",
            "key.parsed_scope.end" : 25,
            "key.parsed_scope.start" : 25,
            "key.typename" : "U.Type",
            "key.typeusr" : "$Sq_mD",
            "key.usr" : "s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF1UL_q_mfp"
          }
        ],
        "key.typename" : "<T, U> ((T, T, T), (T) -> U) -> (U, U, U)",
        "key.typeusr" : "$Syq__q_q_tx_xxt_q_xXEtcr0_luD",
        "key.usr" : "s:10Algorithms3mapyq__q_q_tx_xxt_q_xXEtr0_lF"
      }
    ]
  }
}]
